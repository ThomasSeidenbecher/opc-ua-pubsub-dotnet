# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more
# httpsaka.msyaml

name: $(Build.BuildId)

parameters:
  - name: PoolName
    displayName: Pool
    type: string
    default: 'Windows 2019 Performance'
    values:
    - 'Windows Server 2019'
    - 'Windows 2019 Performance'

trigger:
  branches:
      include:
      - "*"
  paths:
    exclude:
    - Docker/Dockerfile
    - build/pipelines/docker-pipeline.yml



variables:
- group: NuGetCredentials
- group: ProxySettings_TestNet
- group: PhoebeCredentials
- name: NUGET_PACKAGES
  value: $(Pipeline.Workspace)/.nuget/packages

resources:
 containers:
   - container: build_container
     image: energy-dev/build/opc-ua-pubsub-dotnet:latest
     endpoint: Phoebe docker local-SICAM_GridEdge
    #  options: --isolation=hyperv


stages:

- stage: build
  displayName: Build Apps
  
  jobs:
  - job: opcuapubsub
    displayName: opcuapubsub
    container: build_container
    pool:
      name: ${{parameters.PoolName}}
    variables:
      projectName: opcuapubsub
    steps:    

    - task: DownloadSecureFile@1
      name: nuget
      displayName: 'Download Nuget file'
      inputs:
        secureFile: NuGet_Phoebe.Config

    - script: |
        echo Copy $(nuget.secureFilePath) ...
        copy $(nuget.secureFilePath) $(Build.SourcesDirectory)\nuget.config
      displayName: 'Copy NuGet File to destination'

    # NuGet tool installer
    # Acquires a specific version of NuGet from the internet or the tools cache and adds it to the PATH. Use this task to change the version of NuGet used in the NuGet tasks.
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: 5.7.x
        #checkLatest: false # Optional
    
    # Visual Studio test platform installer
    # Acquire the test platform from nuget.org or the tool cache. Satisfies the ‘vstest’ demand and can be used for running tests and collecting diagnostic data using the Visual Studio Test task.
    - task: VisualStudioTestPlatformInstaller@1
      inputs:
        packageFeedSelector: 'nugetOrg' # Options: nugetOrg, customFeed, netShare
        versionSelector: 'latestStable' # Required when packageFeedSelector == NugetOrg || PackageFeedSelector == CustomFeed# Options: latestPreRelease, latestStable, specificVersion
        #testPlatformVersion: # Required when versionSelector == SpecificVersion
        #customFeed: # Required when packageFeedSelector == CustomFeed
        #username: # Optional
        #password: # Optional
        #netShare: # Required when packageFeedSelector == NetShare

    - pwsh: |
        Push-Location src
        $codeDir = Join-Path $(Build.SourcesDirectory) "src"
        $nugetConfigPath = Join-Path $(Build.SourcesDirectory) "nuget.config"
        $solutionPath = Join-Path $codeDir "_ALL.sln"
        Write-Host "Nuget restore"
        nuget restore $solutionPath -ConfigFile $nugetConfigPath -Verbosity detailed -NonInteractive -ForceEnglishOutput
      displayName: Restore
          
    - pwsh: |
        Push-Location src
        $codeDir = Join-Path $(Build.SourcesDirectory) "src"
        $solutionPath = Join-Path $codeDir "_ALL.sln"
        Write-Host "Starting build"
        msbuild /maxcpucount:1 /t:Rebuild /p:Configuration=Release /bl $solutionPath
      displayName: Build

    - task: PublishPipelineArtifact@1
      displayName: Save Build Log
      condition: succeededOrFailed()
      inputs:
        targetPath: '$(Build.SourcesDirectory)/src/msbuild.binlog'
        artifactName: MSBuild Binary Log

    - task: VSTest@2
      displayName: Test
      inputs:
        testAssemblyVer2: |
          $(Build.SourcesDirectory)\src\Tests\**\bin\**\*.Test.dll
        vsTestVersion: toolsInstaller
        codeCoverageEnabled: True
        failOnMinTestsNotRun: True
          
    - script: |
        nuget setapikey $(PHOEBE_EMAIL):$(PHOEBE_APIKEY) -Source Phoebe
        nuget push -Source Phoebe $(Build.SourcesDirectory)/**/Siemens.Energy.OPCUAPubSub.*.nupkg -ConfigFile $(Build.SourcesDirectory)/nuget.config
      displayName: 'Push NugetPackages to Phoebe Artifactory'
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      

